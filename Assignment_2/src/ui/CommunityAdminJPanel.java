/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.Image;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.*;

/**
 *
 * @author UddhavZ
 */
public class CommunityAdminJPanel extends javax.swing.JPanel {
    
    ManagementSystem system;
    JLayeredPane layeredPane;
    House house;
//    City selectedCity = new City();

    String pattern = "MM/dd/yyyy hh:mm:ss";
    SimpleDateFormat sDF = new SimpleDateFormat(pattern);
    private int id;

    /**
     * Creates new form PatientJPanel
     */
    public CommunityAdminJPanel(JLayeredPane layeredPane, ManagementSystem system) {
        initComponents();
        this.layeredPane = layeredPane;
        this.system = system;
        refreshComboBox();
        refresh();
        
        ImageIcon ii = new ImageIcon("icons6.jpg");
        Image img1 = ii.getImage().getScaledInstance(500, 100,Image.SCALE_SMOOTH);
        jLabel3.setIcon(new ImageIcon(img1));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        noEncounterTableStatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnLogOut = new javax.swing.JButton();
        patientJLayeredPane = new javax.swing.JLayeredPane();
        communityJPanel = new javax.swing.JPanel();
        btnAddCityAndCommunity = new javax.swing.JButton();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lbll = new javax.swing.JLabel();
        cityComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCommunities = new javax.swing.JTable();
        lblCommunity1 = new javax.swing.JLabel();
        txtHouse = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        lblCommunity2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        noEncounterTableStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noEncounterTableStatus.setText("No encounter record available");

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        btnLogOut.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        btnLogOut.setText("Log Out");
        btnLogOut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        patientJLayeredPane.setLayout(new java.awt.CardLayout());

        communityJPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnAddCityAndCommunity.setText("ADD");
        btnAddCityAndCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCityAndCommunityActionPerformed(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        lblCity.setText("City:");

        txtCity.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        txtCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCityFocusGained(evt);
            }
        });
        txtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCityKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(" CITY & COMMUNITY");

        lblCommunity.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        lblCommunity.setText("Community:");

        txtCommunity.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        txtCommunity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCommunityFocusGained(evt);
            }
        });
        txtCommunity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCommunityKeyTyped(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("--------------------------------------------------------------------------------------------------------------------------------------------------------------");

        lbll.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        lbll.setText("City:");

        cityComboBox.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboBoxActionPerformed(evt);
            }
        });

        tblCommunities.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Communities"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCommunities.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(tblCommunities);

        lblCommunity1.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        lblCommunity1.setText("House :");

        txtHouse.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        txtHouse.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtHouseFocusGained(evt);
            }
        });
        txtHouse.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHouseKeyTyped(evt);
            }
        });

        txtZip.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        txtZip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtZipFocusGained(evt);
            }
        });
        txtZip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtZipKeyTyped(evt);
            }
        });

        lblCommunity2.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        lblCommunity2.setText("Zip:");

        javax.swing.GroupLayout communityJPanelLayout = new javax.swing.GroupLayout(communityJPanel);
        communityJPanel.setLayout(communityJPanelLayout);
        communityJPanelLayout.setHorizontalGroup(
            communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, communityJPanelLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, communityJPanelLayout.createSequentialGroup()
                        .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, communityJPanelLayout.createSequentialGroup()
                        .addComponent(lblCommunity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(communityJPanelLayout.createSequentialGroup()
                        .addComponent(lblCommunity1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(communityJPanelLayout.createSequentialGroup()
                        .addComponent(lblCommunity2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(btnAddCityAndCommunity)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(communityJPanelLayout.createSequentialGroup()
                .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(communityJPanelLayout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(lbll, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(communityJPanelLayout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 177, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, communityJPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, communityJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, communityJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(118, 118, 118))))
        );
        communityJPanelLayout.setVerticalGroup(
            communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communityJPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(communityJPanelLayout.createSequentialGroup()
                        .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCommunity1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCommunity2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnAddCityAndCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(communityJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbll, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        patientJLayeredPane.add(communityJPanel, "card2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(patientJLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLogOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(patientJLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        LoginJPanel hjp = new LoginJPanel(layeredPane, system);
        displayPanel(layeredPane, hjp);
        
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void btnAddCityAndCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCityAndCommunityActionPerformed
        // TODO add your handling code here:
        addData();
        refresh();
        refreshComboBox();
        txtCity.setText("");
        txtCommunity.setText("");
        txtZip.setText("");
        txtHouse.setText("");

    }//GEN-LAST:event_btnAddCityAndCommunityActionPerformed

    private void txtCityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCityFocusGained
        // TODO add your handling code here:
        //        lblNameValidation.setVisible(false);
    }//GEN-LAST:event_txtCityFocusGained

    private void txtCityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCityKeyTyped
        // TODO add your handling code here:
        if (txtCity.getText().length() > 30 || (!Character.isAlphabetic(evt.getKeyChar())) && (!Character.isSpaceChar(evt.getKeyChar()))) {
            evt.consume();
        }
    }//GEN-LAST:event_txtCityKeyTyped

    private void txtCommunityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCommunityFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommunityFocusGained

    private void txtCommunityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCommunityKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommunityKeyTyped

    private void cityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboBoxActionPerformed
        String city = (String) cityComboBox.getSelectedItem();
        int rowCount = tblCommunities.getRowCount();
        DefaultTableModel model = (DefaultTableModel) tblCommunities.getModel();
        if (city == null) {
            return;
        }
        for(int i=rowCount - 1;i>=0;i--){
            model.removeRow(i);
        }
        if (city.equalsIgnoreCase("all")) {
            for (City c : system.getCities()){
                for (String s : c.getCommunityNames()){
                    Object row[] = new Object[1];
                    row[0] = s.toUpperCase();
                    model.addRow(row);
                }
            }
        }
        for (String c : system.getCity(city).getCommunityNames()) {
            Object row[] = new Object[1];
            row[0] = c.toUpperCase();
            model.addRow(row);
        }
           
        
    }//GEN-LAST:event_cityComboBoxActionPerformed

    private void txtHouseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHouseFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHouseFocusGained

    private void txtHouseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHouseKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHouseKeyTyped

    private void txtZipFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtZipFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtZipFocusGained

    private void txtZipKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtZipKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtZipKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCityAndCommunity;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JPanel communityJPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblCommunity1;
    private javax.swing.JLabel lblCommunity2;
    private javax.swing.JLabel lbll;
    private javax.swing.JLabel noEncounterTableStatus;
    private javax.swing.JLayeredPane patientJLayeredPane;
    private javax.swing.JTable tblCommunities;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtHouse;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    public void displayPanel(JLayeredPane lpane, JPanel panel) {
        lpane.removeAll();
        lpane.add(panel);
        lpane.repaint();
        lpane.revalidate();
    }    
    
    
    private void emptyTable(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }
    
    
    private void refreshComboBox(){
        cityComboBox.removeAllItems();
//        cityComboBox.addItem("Select");
//          cityComboBox.addItem("All");
        for (City c : system.getCities()) {
            System.out.println(c.getName());
            cityComboBox.addItem(c.getName());
        }
    }
    
    private void refresh(){
        
        
        String city = (String) cityComboBox.getSelectedItem();
        int rowCount = tblCommunities.getRowCount();
        DefaultTableModel model = (DefaultTableModel) tblCommunities.getModel();
        if (city == null) {
            return;
        }
        
        for(int i=rowCount - 1;i>=0;i--){
            model.removeRow(i);
        }
        
        if (city.equalsIgnoreCase("all")) {
            for (City c : system.getCities()){
                for (String s : c.getCommunityNames()){
                    Object row[] = new Object[1];
                    row[0] = s.toUpperCase();
                    model.addRow(row);
                }
            }
        }
        for (String c : system.getCity(city).getCommunityNames()) {
            Object row[] = new Object[1];
            row[0] = c.toUpperCase();
            model.addRow(row);
        }
    }
    
    
    private boolean isValidData() {
        boolean isValid = true;
        
        if (txtCity.getText().isBlank()) {
            isValid = false;
            JOptionPane.showMessageDialog(this, "Please enter City", "Error", ERROR_MESSAGE);
            
        } else if (txtCommunity.getText().isBlank()) {
            isValid = false;
            JOptionPane.showMessageDialog(this, "Please enter Community", "Error", ERROR_MESSAGE);
            
        } else {
        
            for (City c : system.getCities()){
                for (String s : c.getCommunityNames()){
                    if (c.getName().equalsIgnoreCase(txtCity.getText()) && s.equalsIgnoreCase(txtCommunity.getText())) {
                        JOptionPane.showMessageDialog(this, "City and community are already in the list", "Error", ERROR_MESSAGE);
                        isValid = false;
                        break;
                    }
                }
            }
            
        }
        return isValid;
    }
    
    private void addData() {
        this.house = new House();
        
        int hNo = -1;

        try {
            hNo = Integer.parseInt(txtHouse.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide House Number!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        house.setHouseNumber(hNo);

        int zipCode = -1;

        try {
            zipCode = Integer.parseInt(txtZip.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide zip code as numbers!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        house.setZip(zipCode);

        if(txtCommunity.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Please provide Community!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        house.setCommunity(txtCommunity.getText());

        if(txtCity.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Please provide City!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        house.setCity(txtCity.getText());
        City newcity = new City(house.getCity());
        system.getCityMap().put(house.getCity(), newcity);
        for(City c: system.getCities())
            System.out.print(c.getName()+", ");
        System.out.println();
        Community newCommunity = new Community();
        newCommunity.addCommunityHouse(house);
        newcity.getAllCommunity().put(house.getCommunity(), newCommunity);
                
    }

}
